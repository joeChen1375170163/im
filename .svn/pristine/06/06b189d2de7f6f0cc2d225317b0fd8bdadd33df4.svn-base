package com.zxwl.common.utils;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StringUtil
{
	public static final String YYYY_MM_DD = "yyyy-MM-dd";
	public static final String YYYY_MM_DD_HH_MM_SS = "yyyy-MM-dd HH:mm:ss";
	public static final String PHONE_REG = "^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\\\d{9}$";

	public static boolean isEmpty(String str)
	{
		if (null == str || str.trim().length() == 0 || "".equals(str.trim()))
		{
			return true;
		}

		return false;
	}

	public static boolean isValue(String str)
	{
		return !isEmpty(str);
	}

	/**
	 * 日期加操作，返回计算后的日期
	 * @throws ParseException
	 */
	public static String addDate(String dateTime, int n) throws ParseException
	{
		SimpleDateFormat dd = new SimpleDateFormat(YYYY_MM_DD);
		Date date = new Date();
		date = dd.parse(dateTime);
		Calendar calstart = Calendar.getInstance();
		calstart.setTime(date);
		calstart.add(Calendar.DAY_OF_MONTH, n);
		return dd.format(calstart.getTime());
	}

	/**
	 * 根据时间查询时，开始时间格式化
	 * @param  beginDate
	 * @return                开始时间
	 * @throws ParseException
	 */
	public static Date dateTransferForBegin(Date beginDate) throws ParseException
	{
		Date startTime = null;
		String temp;
		SimpleDateFormat sdf = new SimpleDateFormat(YYYY_MM_DD);
		if (null == beginDate)
		{
			temp = "1900-01-01";
		}
		else
		{
			temp = sdf.format(beginDate);
		}
		String begin = temp + " 00:00:00";
		System.out.println("The begin is " + begin);
		startTime = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS).parse(begin);

		return startTime;
	}

	/**
	 * 根据时间查询时，结束时间格式化
	 * @param  endDate
	 * @return                结束时间
	 * @throws ParseException
	 */
	public static Date dateTransferForEnd(Date endDate) throws ParseException
	{
		Date endTime = null;
		String temp;
		SimpleDateFormat sdf = new SimpleDateFormat(YYYY_MM_DD);
		if (null == endDate)
		{
			temp = "2100-01-01";
		}
		else
		{
			temp = sdf.format(endDate);
		}
		String end = temp + " 23:59:59";
		endTime = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS).parse(end);
		return endTime;
	}

	/**
	 * 格式化时间 yyyy-MM-dd HH:mm:ss
	 * @param  date需格式化的时间
	 * @return                时间
	 * @throws ParseException
	 */
	public static Date timeTransfer(Date date) throws ParseException
	{
		Date startTime = null;
		SimpleDateFormat sdf = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS);
		if (null == date)
		{
			date = new Date();
		}
		String temp = sdf.format(date);
		System.out.println("The time is " + temp);
		startTime = new SimpleDateFormat(YYYY_MM_DD_HH_MM_SS).parse(temp);
		return startTime;
	}

	/**
	 * 功能描述：时间相减得到毫秒
	 * @param  beginDate
	 * @param  date1
	 * @return           date2
	 */
	public static long getDaySubTime(Date date1, Date date2)
	{
		long day = 0;
		day = date1.getTime() - date2.getTime();
		return day;
	}

	/**
	 * 功能描述：时间相减得到天数
	 * @param  beginDateStr
	 * @param  endDateStr
	 * @return                int
	 * @author                yp
	 * @throws ParseException
	 */
	public static int getDaySub(String beginDateStr, String endDateStr) throws ParseException
	{
		int day = 0;
		SimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD);
		Date beginDate;
		Date endDate;
		beginDate = format.parse(beginDateStr);
		endDate = format.parse(endDateStr);
		day = (int) ((endDate.getTime() - beginDate.getTime()) / (24 * 60 * 60 * 1000));
		return day;
	}

	/**
	 * 功能描述：时间相减得到天数
	 * @param  beginDate
	 * @param  endDate
	 * @return                int
	 * @author                yp
	 * @throws ParseException
	 */
	public static int getDaySub(Date beginDate, Date endDate) throws ParseException
	{
		int day = 0;
		SimpleDateFormat format = new SimpleDateFormat(YYYY_MM_DD);
		String beginDateStr = format.format(beginDate);
		String endDateStr = format.format(endDate);

		day = getDaySub(beginDateStr, endDateStr);
		return day;
	}

	/**
	 * @param  je
	 * @param  def
	 * @return
	 * @author     cbs
	 */
	public static String formatDouble(Double je, String def)
	{
		if (je == 0.00)
		{
			return def;
		}
		DecimalFormat fmt = new DecimalFormat("###,##0.00");
		return fmt.format(je);
	}

	/**
	 * @param  str
	 * @return
	 * @author     cbs
	 */
	public static double strToFloat(String str)
	{
		double re = 0.0;
		try
		{
			re = Double.parseDouble(str);
		}
		catch (Exception e)
		{
			re = 0.0;
		}
		return re;
	}

	/**
	 * @param  str
	 * @return
	 * @author     cbs
	 */
	public static int strToInt(String str)
	{
		int re = 0;
		try
		{
			re = Integer.parseInt(str);
		}
		catch (Exception e)
		{
			re = 0;
		}
		return re;
	}

	/**
	 * 按照指定的格式 格式化日期时间
	 * @param  type 日期时间格式
	 * @param  date 要格式化的日期时间
	 * @return      String
	 */
	public static String formatDate(String type, Date date)
	{
		SimpleDateFormat sdf = new SimpleDateFormat(type);
		return sdf.format(date);
	}

	/**
	 * 利用正则表达式判断字符串是否是数字
	 * @param  str
	 * @return
	 */
	public static boolean isNumeric(String str)
	{
		if (str == null || "".equals(str))
		{
			return false;
		}
		Pattern pattern = Pattern.compile("[0-9]*");
		Matcher isNum = pattern.matcher(str);
		if (!isNum.matches())
		{
			return false;
		}
		return true;
	}

	/*
	 * 方法二：推荐，速度最快 判断是否为整数
	 * @param str 传入的字符串
	 * @return 是整数返回true,否则返回false
	 */
	public static boolean isInteger(String str)
	{
		Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");
		return pattern.matcher(str).matches();
	}

	/**
	 * 获取字符串的编码
	 * @param  value 字符串
	 * @return       字符串的编码，为空时表示不是常见的编码
	 */
	public static String getEncoding(String value)
	{
		try
		{
			if (value.equals(new String(value.getBytes("GB2312"), "GB2312")))
			{ // 判断是不是GB2312
				return "GB2312"; // 是的话，返回“GB2312“，以下代码同理
			}
			else if (value.equals(new String(value.getBytes("ISO-8859-1"), "ISO-8859-1")))
			{ // 判断是不是ISO-8859-1
				return "ISO-8859-1";
			}
			else if (value.equals(new String(value.getBytes("UTF-8"), "UTF-8")))
			{ // 判断是不是UTF-8
				return "UTF-8";
			}
			else if (value.equals(new String(value.getBytes("GBK"), "GBK")))
			{ // 判断是不是GBK
				return "GBK";
			}
		}
		catch (Exception exception)
		{}
		//		return "I don't know"; // 如果都不是，说明输入的内容不属于常见的编码格式。
		return "";
	}

	public static void main(String[] args)
	{
		System.out.println(StringUtil.isNumeric(null));

		System.out.println(!StringUtil.isEmpty("[]") || "[]".equals("[]"));
	}
}
