package com.zxwl.common.task;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.stereotype.Component;

import com.zxwl.common.utils.JsonUtil;
import com.zxwl.common.utils.StringUtil;
import com.zxwl.common.utils.SystemConfigManager;
import com.zxwl.im.entity.MessageInfo;
import com.zxwl.im.mq.entity.Agent;
import com.zxwl.im.mq.entity.Customer;
import com.zxwl.im.service.IMessageHistoryService;
import com.zxwl.im.service.IRabbitProductorService;
import com.zxwl.im.websocket.IMManage;

@Component
public class AgentTask
{

	private static final Logger logger = LoggerFactory.getLogger(AgentTask.class);

	@Autowired
	private IRabbitProductorService rabbitProductorService;
	@Autowired
	private IMessageHistoryService messageHistoryService;

//	private static Integer maxServiceNum;
	private static String exchange;
	private static String agentKey;
	private static String customerKey;

//	@Value("${imconf.maxServiceNum}")
//	public void setMaxServiceNum(Integer maxServiceNum)
//	{
//		AgentTask.maxServiceNum = maxServiceNum;
//	}

	@Value("${imconf.exchange}")
	public void setExchange(String exchange)
	{
		AgentTask.exchange = exchange;
	}

	@Value("${imconf.agentKey}")
	public void setAgentKey(String agentKey)
	{
		AgentTask.agentKey = agentKey;
	}

	@Value("${imconf.customerKey}")
	public void setCustomerKey(String customerKey)
	{
		AgentTask.customerKey = customerKey;
	}

	@Scheduled(fixedDelay = 1000)
	public void allocationAgent()
	{

		try
		{
			//			logger.info("开始扫描等待队列中的客户");
			// 先判断客服掉线后客户的等待队列和客户连接后进入的等待队列里有没有客户在等待
			if (IMManage.getAgentDropWaitSize() > 0 || IMManage.getWaitCustomerSize() > 0)
			{
				// 用于判断取出的客户是不是WaitCustomer缓存中的
				boolean isWaitCustomer = true;
				// 获取等待的客户
				String customerId = "";
				// 先取客服掉线后进入等待的客户，没有数据再取连接后进入等待的客户
				if (IMManage.getAgentDropWaitSize() > 0)
				{
					customerId = queryAgentDropWait();
					isWaitCustomer = false;
				}
				else if (IMManage.getWaitCustomerSize() > 0)
				{
					customerId = queryWaitCustomer();
				}
				// 如果customerId为空表示没有有客户处于等待状态，则跳过本次分配
				if (StringUtil.isEmpty(customerId))
				{
					//					logger.info("扫描结束：没有处于等待状态的客户");
					return;
				}

				// 有客户再等待时获取可用的客服
				String agentId = queryAgent(customerId);
				if (StringUtil.isEmpty(agentId))
				{
					// 如果没有可用的客服则跳过本次分配
					//					logger.info("扫描结束：没有可分配的客服");
					return;
				}

				// 如果获取到了可用客户和等待的客户，就将该客户分配给该客服服务
				sendToAgentAndCustomer(agentId, customerId, isWaitCustomer);

			}
			else
			{
				//				logger.info("扫描结束：等待队列为空，没有客户处于等待状态");
			}
		}
		catch (Exception e)
		{
			logger.error("获取等待队列中的客户分配客服时出现异常", e);
		}
	}

	/**
	 * 获取客服掉线后进入等待的客户
	 * @return 客户id
	 */
	public String queryAgentDropWait()
	{

		String cunstomer;
		try
		{
			if (IMManage.getAgentDropWaitSize() > 0)
			{
				// 根据客户进入等待队列的时间来进行升序排序
				List<Entry<String, Customer>> customerSort = IMManage.getCustomerSort(IMManage.getAgentDropWaitMap());
				cunstomer = customerSort.get(0).getKey();
			}
			else
			{
				cunstomer = "";
				//				logger.info("获取客服掉线后进入等待的客户：等待队列agentDropWait为空");
			}
		}
		catch (Exception e)
		{
			cunstomer = "";
			logger.info("获取客服掉线后进入等待的客户出现异常", e);
		}
		return cunstomer;
	}

	/**
	 * 获取连接时进入等待队列的客户
	 * @return 客户id
	 */
	public String queryWaitCustomer()
	{
		String customerId;
		try
		{
			if (IMManage.getWaitCustomerSize() > 0)
			{
				// 根据客户进入等待队列的时间来进行升序排序
				List<Entry<String, Customer>> customerSort = IMManage.getCustomerSort(IMManage.getWaitCustomersMap());

				customerId = customerSort.get(0).getKey();
			}
			else
			{
				customerId = "";
				//				logger.info("获取连接时进入等待队列的客户：等待队列waitCustomer为空");
			}
		}
		catch (Exception e)
		{
			customerId = "";
			logger.error("获取连接时进入等待队列的客户出现异常", e);
		}

		return customerId;
	}

	/**
	 * 获取可用的客服，优先分配上一次服务的客服
	 * @param  customerId 客户id
	 * @return            客服id
	 */
	public String queryAgent(String customerId)
	{
		String agentId;
		try
		{

			// 获取在线的客服
			if (IMManage.getAgentSize() == 0)
			{
				agentId = "";
				//				logger.info("获取可用的客服：没有客服在线");
				return agentId;
			}

			// 获取上一次服务的客服
			agentId = messageHistoryService.queryLastAgentId(customerId);
			if (!StringUtil.isEmpty(agentId) && null != IMManage.getAgent(agentId))
			{
				return agentId;
			}

			// 若上一次服务的客服不存在或不在线，则从在线的客服中获取
			List<Map.Entry<String, Agent>> agentList = new ArrayList<>(IMManage.getAgentEntrySet());
			// 根据客服同时服务的客户数量来进行升序排序
			Collections.sort(agentList, new Comparator<Map.Entry<String, Agent>>()
			{

				@Override
				public int compare(Entry<String, Agent> o1, Entry<String, Agent> o2)
				{
					int size1 = o1.getValue().getCustomerIds().size();
					int size2 = o2.getValue().getCustomerIds().size();
					if (size1 > size2)
					{
						return 1;
					}
					else if (size1 < size2)
					{
						return -1;
					}
					else
					{
						return 0;
					}
				}
			});
			// 取第一个数据，服务数量最小的座席
			agentId = agentList.get(0).getKey();
			// 如果当前客服同时服务数量已到达最大值，则结束本次分配客服，客户继续处于等待状态
			int maxServiceNum = Integer.valueOf(SystemConfigManager.getConfigValue("maxServiceNum"));
			if (IMManage.getAgent(agentId).getCustomerIds().size() >= maxServiceNum )
			{
				agentId = "";
			}
		}
		catch (Exception e)
		{
			agentId = "";
			logger.info("获取可用的客服客户出现异常", e);
		}
		return agentId;
	}

	/**
	 * 将分配的客户推送给客户，将分配的客服推送给客户
	 * @param agentId    客服id
	 * @param customerId 客户id
	 */
	public void sendToAgentAndCustomer(String agentId, String customerId, boolean isWaitCustomer)
	{
		try
		{
			Agent agent = IMManage.getAgent(agentId);
			Customer customer;
			if (!isWaitCustomer)
			{
				customer = IMManage.getAgentDropWait(customerId);
			}
			else
			{
				customer = IMManage.getWaitCustomer(customerId);
			}
			// 给客服提示客户已连接信息
			MessageInfo toAgentInfo = new MessageInfo();
			toAgentInfo.setContentType("3");
			toAgentInfo.setSenderId(customerId);
			toAgentInfo.setSenderName(customer.getName());
			toAgentInfo.setReceiverId(agentId);
			toAgentInfo.setReceiverName(agent.getName());
			if (toAgentInfo.getSenderName().length() > 8)
			{
				toAgentInfo.setMessage("客户" + toAgentInfo.getSenderName().substring(0, 8) + "已连接");
			}
			else
			{
				toAgentInfo.setMessage("客户" + toAgentInfo.getSenderName() + "已连接");
			}

			// 给客户提示分配的客服为其服务信息
						MessageInfo toCustomerInfo = new MessageInfo();
			toCustomerInfo.setContentType("3");
			toCustomerInfo.setSenderId(agentId);
			toCustomerInfo.setSenderName(agent.getName());
			toCustomerInfo.setReceiverId(customerId);
			toCustomerInfo.setReceiverName(customer.getName());
			if (toCustomerInfo.getSenderName().length() > 8)
			{
				toCustomerInfo.setMessage("客服" + toCustomerInfo.getSenderName().substring(0, 8) + "为您服务");
			}
			else
			{
				toCustomerInfo.setMessage("客服" + toCustomerInfo.getSenderName() + "为您服务");
			}
			String agentMsg = JsonUtil.toString(toAgentInfo);
			String clientMsg = JsonUtil.toString(toCustomerInfo);
			if (!StringUtil.isEmpty(agentMsg) && !StringUtil.isEmpty(clientMsg))
			{

				rabbitProductorService.sendMessage(exchange, agentKey, agentMsg);
				rabbitProductorService.sendMessage(exchange, customerKey, clientMsg);

				// 删除等待队列中的该客户
				if (!isWaitCustomer)
				{
					IMManage.removeAgentDropWait(customerId);
				}
				else
				{
					IMManage.removeWaitCustomer(customerId);
				}
				// 将该客户放入customer缓存中
				IMManage.putCustomer(customerId, customer);
				agent.addCustomerIds(customerId);
				customer.setAgentId(agentId);
				logger.info("分配客服：id=" + agentId + ", name=" + agent.getName() + " 服务客户：id=" + customerId + ", name="
						+ customer.getName());
			}
			else
			{
				logger.error("分配座席后将消息推送给客服和客户时，将消息实体MessageInfo转换成json字符串后得到的数据为null");
			}
		}
		catch (Exception e)
		{
			logger.error("分配座席后将消息推送给客服和客户时出现异常", e);
		}

	}

	@Bean
	public TaskScheduler scheduledExecutorService()
	{
		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
		scheduler.setPoolSize(8);
		scheduler.setThreadNamePrefix("scheduled-thread-");
		return scheduler;
	}
}
